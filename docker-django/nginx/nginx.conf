# nginxユーザをrootにしてdockerリンクボリュームにアクセスできるようにする
user root;
# プロセスは自動発行
worker_processes auto;
# エラーログのファイルパスを定義
error_log /opt/apps/log/error.log warn;
# プロセスIDを格納
pid /var/run/nginx.pid;

# 設定ファイルをかき集めて展開
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections 1024;
}

# HTTPリクエストが来たときの設定
http {
    # ログ出力のフォーマットを定義
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for" "$request_body"';

    # アクセスログのファイルパスを指定
    access_log  /opt/apps/log/access.log  main;

    # 通信の基礎設定
    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    # 取り扱うファイルの指定
    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # 設定ファイルをかき集めて展開
    include /etc/nginx/conf.d/*.conf;

    # インデックスページの表示設定
    index   index.html index.htm;

    # djangoサーバを事前定義
    upstream django_server {
        server retriever_django:3031 fail_timeout=0;
    }

    # サーバ配信設定
    server {
        # ポート80番で待受
        listen       80 default_server;
        listen       [::]:80 default_server;
        # サーバ名を指定
        server_name  localhost;
        # 通信ファイルの最大サイズを指定
        # メディアファイルを扱うので大きく設定
        client_max_body_size    4G;
        # リクエストはnginxで溜めない
        proxy_request_buffering off;

        # 設定ファイルをかき集めて展開
        include /etc/nginx/default.d/*.conf;

        # /static/へのアクセスだった場合の振り分け
        location /static/ {
               # nginx管理下のボリュームから送り返す
               alias /opt/apps/static/;
        }

        # /media/へのアクセスだった場合の振り分け
        location /media/ {
               # nginx管理下のボリュームから送り返す
               alias /opt/apps/media/;
        }

        # ドメインのみのアクセスだった場合
        location / {
          # djangoアクセス設定を使用した振り分けを試みる
          try_files $uri @proxy_to_django;
        }

        # djangoサーバへのアクセスアクセス振り分け設定
        location @proxy_to_django {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_redirect off;
            # djangoサーバの事前定義を使用
            proxy_pass http://django_server;
        }

        # 該当する振り分け先がなかった場合
        error_page 404 /404.html;
            # nginxが用意するエラーページを表示
            location = /40x.html {
        }

        # 振り分け先サーバの応答がなかった場合
        error_page 500 502 503 504 /50x.html;
            # nginxが用意するエラーページを表示
            location = /50x.html {
        }
    }

# HTTPS対応は諦めた…

# Settings for a TLS enabled server.
#
#    server {
#        listen       443 ssl http2 default_server;
#        listen       [::]:443 ssl http2 default_server;
#        server_name  _;
#        root         /usr/share/nginx/html;
#
#        ssl_certificate "/etc/pki/nginx/server.crt";
#        ssl_certificate_key "/etc/pki/nginx/private/server.key";
#        # It is *strongly* recommended to generate unique DH parameters
#        # Generate them with: openssl dhparam -out /etc/pki/nginx/dhparams.pem 2048
#        #ssl_dhparam "/etc/pki/nginx/dhparams.pem";
#        ssl_session_cache shared:SSL:1m;
#        ssl_session_timeout  10m;
#        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
#        ssl_ciphers HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP;
#        ssl_prefer_server_ciphers on;
#
#        # Load configuration files for the default server block.
#        include /etc/nginx/default.d/*.conf;
#
#        location / {
#        }
#
#        error_page 404 /404.html;
#            location = /40x.html {
#        }
#
#        error_page 500 502 503 504 /50x.html;
#            location = /50x.html {
#        }
#    }

}
